2014-11-05  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.h (ASM_OUTPUT_MAX_SKIP_ALIGN): Define.
	* config/avr/avr.c (avr_loop_align_max_skip): New function.
	(TARGET_ASM_LOOP_ALIGN_MAX_SKIP): Define.

2014-10-08  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/genmultilib.awk: Remove Multilib matches processing.
	* config/avr/t-multilib: Regenerate.

2014-10-07  Joern Rennecke  <joern.rennecke@embecosm.com>

	* cfgexpand.c (expand_debug_expr): Get address space from
	TARGET_MEM_REF.

2014-09-23  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.h (LIBSTDCXX): Don't define.

2014-08-29  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr-c.c (avr_cpu_cpp_builtins): Don't define
	__MEMX for avrtiny.
	* config/avr/avr.c (avr_insert_attributes): Reject __memx for avrtiny.
	(avr_nonconst_pointer_addrspace): Likewise.
	* config/avr/avr.h (AVR_HAVE_LPM): Define.

2014-08-28  Joern Rennecke  <joern.rennecke@embecosm.com>

	* caller-save.c (replace_reg_with_saved_mem): If saved_mode covers
	multiple hard registers, use word_mode.

2014-08-26  Joern Rennecke  <joern.rennecke@embecosm.com>
	Merge this patch:

	2013-01-08  Vidya Praveen <vidya.praveen@atmel.com>
	      Praveen Kumar Kaushik <Praveen_Kumar.Kaushik@atmel.com>
	      Senthil Kumar Selvaraj <Senthil_Kumar.Selvaraj@atmel.com>
	      Pitchumani Sivanupandi <Pitchumani.S@atmel.com>
	  Added AVRTINY architecture to avr target.
	  * config/avr/avr-arch.h (avr_arch): Added AVRTINY architecture.
	  (base_arch_s): member added for AVRTINY architecture.
	  * config/avr/avr.c: Added TINY_ADIW, TINY_SBIW macros as AVRTINY
	  alternate for adiw/sbiw instructions. Added AVR_TMP_REGNO and
	  AVR_ZERO_REGNO macros for tmp and zero registers. Replaced TMP_REGNO
	  and ZERO_REGNO occurrences by AVR_TMP_REGNO and AVR_ZERO_REGNO
	  respectively. LAST_CALLEE_SAVED_REG macro added for the last register
	  in callee saved register list.
	  (avr_option_override): CCP address updated for AVRTINY.
	  (avr_init_expanders): tmp and zero rtx initialized as per arch.
	  Reset avr_have_dimode if AVRTINY.
	  (sequent_regs_live): Use LAST_CALLEE_SAVED_REG instead magic number.
	  (emit_push_sfr): Use AVR_TMP_REGNO for tmp register number.
	  (avr_prologue_setup_frame): Don't minimize prologue if AVRTINY.
	  Use LAST_CALLEE_SAVED_REG to refer last callee saved register.
	  (expand_epilogue): Likewise.
	  (avr_print_operand): Print CCP address in case of AVRTINY also.
	  <TBD>bad address
	  (function_arg_regno_p): Check different register list for arguments
	  if AVRTINY.
	  (init_cumulative_args): Check for AVRTINY to update number of argument
	  registers.
	  (tiny_valid_direct_memory_access_range): New function. Return false if
	  direct memory access range is not in accepted range for AVRTINY.
	  (avr_out_movqi_r_mr_reg_disp_tiny): New function to handle register
	  indirect load (with displacement) for AVRTINY.
	  (out_movqi_r_mr): Updated instruction length for AVRTINY. Call
	  avr_out_movqi_r_mr_reg_disp_tiny for load from reg+displacement.
	  (avr_out_movhi_r_mr_reg_no_disp_tiny): New function to handle register
	  indirect load (no displacement) for AVRTINY.
	  (avr_out_movhi_r_mr_reg_disp_tiny): New function to handle register
	  indirect load (with displacement) for AVRTINY.
	  (avr_out_movhi_r_mr_pre_dec_tiny): New function to handle register
	  indirect load for pre-decrement address.
	  (out_movhi_r_mr): In case of AVRTINY, call tiny register indirect load
	  functions. Update instruction length for AVRTINY.
	  (avr_out_movsi_r_mr_reg_no_disp_tiny): New function. Likewise, for
	  SImode.
	  (avr_out_movsi_r_mr_reg_disp_tiny): New function. Likewise, for SImode.
	  (out_movsi_r_mr): Likewise, for SImode.
	  (avr_out_movsi_mr_r_reg_no_disp_tiny): New function to handle register
	  indirect store (no displacement) for AVRTINY.
	  (avr_out_movsi_mr_r_reg_disp_tiny): New function to handle register
	  indirect store (with displacement) for AVRTINY.
	  (out_movsi_mr_r): Emit out insn for IO address store. Update store
	  instruction's size for AVRTINY. For AVRTINY, call tiny SImode indirect
	  store functions.
	  (avr_out_load_psi_reg_no_disp_tiny): New function to handle register
	  indirect load (no displacement) for PSImode in AVRTINY.
	  (avr_out_load_psi_reg_disp_tiny): New function to handle register
	  indirect load (with displacement) for PSImode in AVRTINY.
	  (avr_out_load_psi): Call PSImode register indirect load functions for
	  AVRTINY. Update instruction length for AVRTINY.
	  (avr_out_store_psi_reg_no_disp_tiny): New function to handle register
	  indirect store (no displacement) for PSImode in AVRTINY.
	  (avr_out_store_psi_reg_disp_tiny): New function to handle register
	  indirect store (with displacement) for PSImode in AVRTINY.
	  (avr_out_store_psi): Update instruction length for AVRTINY. Call tiny
	  register indirect store functions for AVRTINY.
	  (avr_out_movqi_mr_r_reg_disp_tiny): New function to handle QImode
	  register indirect store (with displacement) for AVRTINY.
	  (out_movqi_mr_r): Update instruction length for AVRTINY. Call tiny
	  register indirect store function for QImode in AVRTINY.
	  (avr_out_movhi_mr_r_xmega): Update instruction length for AVRTINY.
	  (avr_out_movhi_mr_r_reg_no_disp_tiny): New function to handle register
	  indirect store (no displacement) for HImode in AVRTINY.
	  (avr_out_movhi_mr_r_reg_disp_tiny): New function to handle register
	  indirect store (with displacement) for HImode in AVRTINY.
	  (avr_out_movhi_mr_r_post_inc_tiny): New function to handle register
	  indirect store for post-increment address in HImode.
	  (out_movhi_mr_r): Update instruction length for AVRTINY. Call tiny
	  register indirect store function for HImode in AVRTINY.
	  (avr_out_compare): Use TINY_SBIW/ TINY_ADIW in place of sbiw/adiw
	  in case of AVRTINY.
	  (order_regs_for_local_alloc): Updated register allocation order for
	  AVRTINY.
	  (avr_conditional_register_usage): New function. It is a target hook
	  (TARGET_CONDITIONAL_REGISTER_USAGE) function which updates fixed, call
	  used registers list and register allocation order for AVRTINY.
	  (avr_return_in_memory): Update return value size for AVRTINY.
	  * config/avr/avr-c.c (avr_cpu_cpp_builtins): Added builtin macros
	  for AVRTINY arch and tiny program memory base address.
	  * config/avr/avr-devices.c (avr_arch_types): Added AVRTINY arch.
	  (avr_texinfo): Added description for AVRTINY arch.
	  * config/avr/avr.h: Added macro to identify AVRTINY arch. Updated
	  STATIC_CHAIN_REGNUM for AVRTINY.
	  * config/avr/avr-mcus.def: Added AVRTINY arch devices.
	  * config/avr/avr.md: Added constants for tmp/ zero registers in
	  AVRTINY. Attributes for AVRTINY added.
	  (mov<mode>): Move src/ dest address to register if it is not in AVRTINY
	  memory access range.
	  (mov<mode>_insn): Avoid QImode direct load for AVRTINY if address not
	  in AVRTINY memory access range.
	  (*mov<mode>): Likewise for HImode and SImode.
	  (*movsf): Likewise for SFmode.
	  (delay_cycles_2): Updated instructions to be emitted as AVRTINY does
	  not have sbiw.
	  * config/avr/avr-protos.h: Added function prototype for
	  tiny_valid_direct_memory_access_range.
	  * config/avr/avr-tables.opt: Regenerate.
	  * gcc/config/avr/t-multilib: Regenerate.
	  * doc/avr-mmcu.texi: Regenerate.

2014-08-25  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.opt (mrmw): New option.
	* config/avr/avr-c.c (avr_cpu_cpp_builtins):
	Use TARGET_RMW instead of avr_current_device->dev_attributes.
	Don't define avr_current_device->macro (that's the specfile's job).
	* config/avr/gen-avr-mmcu-specs.c (print_mcu)
	<cc1, cc1plus>: Check mcu->dev_attribute for AVR_SHORT_SP and
	AVR_ISA_RMW; add -rmw as appropriate.
	<link> Add -Ttext argument.
	<cpp>: Print __AVR_DEVICE_NAME__ definition.

2014-08-21  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.h (ASM_SPEC): Add -%{mrelax: --mlink-relax}.
	* config/avr/gen-avr-mmcu-specs.c (print_mcu) <asm>: Likewise.

2014-07-16  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/gen-avr-mmcu-specs.c (print_mcu) <cpp>: Only define
	__AVR_DEV_LIB_NAME__ when compiling for a specific device.
	<lib>: When compiling for a device, add libdev.a.
	<startfile>: Crt file has moved to device directory.
	* config/avr/avr-arch.h (avr_mcu_t) <library_name>: Update comment.

2014-07-01  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/gen-avr-mmcu-specs.c (print_mcu) <*cpp>:
	Define __AVR_DEV_LIB_NAME__ .

2014-06-12  Joern Rennecke  <joern.rennecke@embecosm.com>

	* builtins.c: Include attribs.h and tree-nested.h.
	(expand_builtin): Implement targetm.calls.stdio_altname hook.
	* builtins.def (BUILT_IN_ASPRINTF): New builtin.
	* target.def (calls): Add stdio_altname.
	* doc/tm.texi.in: Add @hook TARGET_STDIO_ALTNAME.
	* doc/tm.texi: Regenerate.

	* config/avr/avr-protos.h (avr_stdio_altname): Prototype.
	* config/avr/avr.c (avr_stdio_altname): New function.
	(TARGET_STDIO_ALTNAME): Redefine.
	* config/avr/avr.h (LIB_SPEC): Add -lprintf_flt and -lscanf_flt.
	* config/avr/gen-avr-mmcu-specs.c (print_mcu) <*link>: Likewise.

2014-05-28  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr-arch.h: Add double include guard.
	* config/avr/avr.c (avr_option_override): Use avr_arch_index instead
	of avr_mcu_string.
	* config/avr/avr.h (avr_device_to_as, avr_device_to_ld): Don't declare.
	(avr_device_to_data_start, avr_device_to_startfiles): Likewise.
	(avr_device_to_devicelib, avr_device_to_sp8): Likewise.
	(EXTRA_SPEC_FUNCTIONS): Don't define.
	(ASM_SPEC): Translate -arch= option to -mmcu= option.
	(LINK_SPEC): Translate -arch= option to -m= option.
	Don't use device_to_ld / device_to_data_start.
	(STARTFILE_SPEC): Now empty.
	* config/avr/avr.opt (HeaderInclude): New.
	(mmcu=): Remove Var / Init clauses.
	(mlib=): Remove.
	(march=): New option.
	* config/avr/driver-avr.c (avr_device_to_as): Delete.
	(avr_device_to_ld, avr_device_to_data_start): Likewise.
	(avr_device_to_startfiles, avr_device_to_devicelib): Likewise.
	(avr_device_to_sp8): Likewise.
	* config/avr/gen-avr-mmcu-specs.c (print_mcu) <self_spec>:
	Unless -march= was given, supply -march= setting.
	<cc1, cc1plus>: Remove -mmcu= setting.
	<asm>: Supply -mmcu according to -march=.
	<link> Supply -m according to -march=.
	* config/avr/genmultilib.awk: use -march=.
	* config/avr/genopt.sh:  Instead avr_mcu, emit an Enum for avr_arch.
	* config/avr/avr-tables.opt, config/avr/t-multilib: Regenerate.

2014-05-20  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.opt (mlib=): New option.
	* config/avr/gen-avr-mmcu-specs.c (print_mcu): Output *self_spec.
	<*lib>: Add terminating double-newline.
	* config/avr/genmultilib.awk: Use -mlib=.
	* config/avr/t-multilib: Regenerate.

	* config/avr/gen-avr-mmcu-specs.c (print_mcu): Output sp8 as part
	of *self_spec, but don't repeat in *cc1/*cc1plus/*link.

2014-05-13  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.c (avr_encode_section_info): Don't set
	SYMBOL_FLAG_ADDRESS for external symbols.

2014-05-13  Joern Rennecke  <joern.rennecke@embecosm.com>

	* doc/extend.texi (io, address): Document io_low variable attribute.

2014-05-12  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.h (SYMBOL_FLAG_IO_LOW): Define.
	* config/avr/avr.c (avr_handle_addr_attribute): Handle io_low
	attribute.
	(avr_encode_section_info): Likewise.
	(avr_attribute_table): Add "io_low".
	(avr_out_sbxx_branch): Handle symbolic io addresses.
	* config/avr/avr.md (cbi, sbi): Change constraint for
	low_io_address_operand operand to "i".
	(sbix_branch, sbix_branch_bit7, insv.io, insv.not.io): Likewise.
	* config/avr/predicates.md (low_io_address_operand):
	Allow SYMBOL_REF with SYMBOL_FLAG_IO_LOW.

2014-05-09  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.c (avr_print_operand) <i>: When outputting
	a symbolic I/O address, subtract sfr_offset.

2014-05-09  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.h (SYMBOL_FLAG_IO, SYMBOL_FLAG_ADDRESS): Define.
	(ASM_OUTPUT_ALIGNED_BSS): Use avr_asm_asm_output_aligned_bss.
	* config/avr/avr.c (varasm.h): #include.
	(avr_print_operand) <i>: Allow SYMBOL_REF with SYMBOL_FLAG_IO.
	(avr_handle_addr_attribute, avr_eval_addr_attrib): New functions.
	(avr_attribute_table): Add "io" and "address".
	(avr_asm_output_aligned_decl_common): Change type of decl to tree.
	Add special handling for symbols with "io" and/or "address" attributes.
	(avr_asm_asm_output_aligned_bss): New function.
	(avr_encode_section_info): Set SYMBOL_FLAG_IO and SYMBOL_FLAG_ADDRESS
	as appropriate.
	* config/avr/avr.md (mov<mode>): Use avr_eval_addr_attrib.
	* config/avr/predicates.md (io_address_operand):
	Allow SYMBOL_REF with SYMBOL_FLAG_IO.
	* config/avr/avr-protos.h (avr_asm_output_aligned_decl_common):
	Update prototype.
	(avr_eval_addr_attrib, avr_asm_asm_output_aligned_bss): Prototype.
	* doc/extend.texi (io, address): Document new AVR variable attributes.

2014-03-31  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.opt (mmcu=): Change to have a string value.
	(mn-flash=, mskip-bug): New options.
	* config/avr/avr.h (DRIVER_SELF_SPECS): Translate -mmcu into a
	-specs option.
	* config/avr/gen-avr-mmcu-specs.c: New file.
	* config/avr/t-avr (gen-avr-mmcu-specs$(build_exeext)): New rule.
	(s-device-specs): Likewise.
	(GCC_PASSES): Add s-device-specs.
	(install-driver): Depend on install-device-specs.
	(install-device-specs): New rule.
	* config/avr/avr.c (avr_option_override): Look of mcu arch by base
	mcu name and provide fallback initialization for avr_n_flash.
	(avr_xload_libgcc_p, avr_nonconst_pointer_addrspace):  Use
	avr_n_flash instead of avr_current_device->n_flash.
	(avr_pgm_check_var_decl, avr_insert_attributes): Likewise.
	(avr_emit_movmemhi): Likewise.
	* config/avr/avr-c.c (avr_cpu_cpp_builtins): Likewise.
	Use TARGET_SKIP_BUG instead of avr_current_device->errata_skip.
	* config/avr/avr.c (avr_2word_insn_p): Likewise.
	* config/avr/avr.md (*cpse.ne): Likewise.

2014-03-05  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.c (TARGET_UNWIND_WORD_MODE): Define.
	(avr_unwind_word_mode): New function.

2014-02-21  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.c (avr_asm_function_rodata_section):
	Distinguish between ".progmem.gcc_sw_table" and "".gnu.linkonce.t.*"
	sections when decide what section flags to set.

2014-02-19  Joern Rennecke  <joern.rennecke@embecosm.com>

	* config/avr/avr.c (avr_can_eliminate): Allow elimination from
	ARG_POINTER_REGNUM
	to STACK_POINTER_REGNUM if !frame_pointer_needed.
	* config/avr/avr.h (ELIMINABLE_REGS): Add elimination from
	ARG_POINTER_REGNUM to STACK_POINTER_REGNUM.

2013-06-14  Joern Rennecke <joern.rennecke@embecosm.com>

	* config/avr/avr.c (avr_asm_function_rodata_section):
	When merging something into a function-specific section, always
	add the SECTION_CODE flag.
